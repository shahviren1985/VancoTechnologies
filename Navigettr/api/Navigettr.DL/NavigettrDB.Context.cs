//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Navigettr.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NavigettrEntities : DbContext
    {
        public NavigettrEntities()
            : base("name=NavigettrEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<PartnerDetail> PartnerDetails { get; set; }
        public virtual DbSet<PartnerLocationDetail> PartnerLocationDetails { get; set; }
        public virtual DbSet<PartnerLocationWorkTime> PartnerLocationWorkTimes { get; set; }
        public virtual DbSet<PartnerOffer> PartnerOffers { get; set; }
        public virtual DbSet<PartnerRate> PartnerRates { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SystemParam> SystemParams { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserNotification> UserNotifications { get; set; }
        public virtual DbSet<UserReminder> UserReminders { get; set; }
        public virtual DbSet<PartnerCharge> PartnerCharges { get; set; }
        public virtual DbSet<UserLocationTracker> UserLocationTrackers { get; set; }
        public virtual DbSet<UserRewardPoint> UserRewardPoints { get; set; }
        public virtual DbSet<UserSearchTracker> UserSearchTrackers { get; set; }
        public virtual DbSet<UserQRCodeTracker> UserQRCodeTrackers { get; set; }
    
        public virtual ObjectResult<usp_Roles_Get_Result> usp_Roles_Get(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Roles_Get_Result>("usp_Roles_Get", iDParameter);
        }
    
        public virtual ObjectResult<SP_FetchPartnerCount_Result> SP_FetchPartnerCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerCount_Result>("SP_FetchPartnerCount");
        }
    
        public virtual ObjectResult<SP_FetchPartnerLocationDetailsCount_Result> SP_FetchPartnerLocationDetailsCount(Nullable<int> partnerID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerLocationDetailsCount_Result>("SP_FetchPartnerLocationDetailsCount", partnerIDParameter);
        }
    
        public virtual int SP_PartnerOffers_InsertUpdate(Nullable<int> iD, Nullable<int> partnerID, string offerName, string offerType, string offerText, Nullable<System.DateTime> offerStartDate, Nullable<System.DateTime> offerEndDate, string status, Nullable<System.DateTime> dateActivation, Nullable<System.DateTime> dateExpiry, ObjectParameter statusResult)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var offerNameParameter = offerName != null ?
                new ObjectParameter("OfferName", offerName) :
                new ObjectParameter("OfferName", typeof(string));
    
            var offerTypeParameter = offerType != null ?
                new ObjectParameter("OfferType", offerType) :
                new ObjectParameter("OfferType", typeof(string));
    
            var offerTextParameter = offerText != null ?
                new ObjectParameter("OfferText", offerText) :
                new ObjectParameter("OfferText", typeof(string));
    
            var offerStartDateParameter = offerStartDate.HasValue ?
                new ObjectParameter("OfferStartDate", offerStartDate) :
                new ObjectParameter("OfferStartDate", typeof(System.DateTime));
    
            var offerEndDateParameter = offerEndDate.HasValue ?
                new ObjectParameter("OfferEndDate", offerEndDate) :
                new ObjectParameter("OfferEndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dateActivationParameter = dateActivation.HasValue ?
                new ObjectParameter("DateActivation", dateActivation) :
                new ObjectParameter("DateActivation", typeof(System.DateTime));
    
            var dateExpiryParameter = dateExpiry.HasValue ?
                new ObjectParameter("DateExpiry", dateExpiry) :
                new ObjectParameter("DateExpiry", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerOffers_InsertUpdate", iDParameter, partnerIDParameter, offerNameParameter, offerTypeParameter, offerTextParameter, offerStartDateParameter, offerEndDateParameter, statusParameter, dateActivationParameter, dateExpiryParameter, statusResult);
        }
    
        public virtual int SP_PartnerLocationDetails_InsertUpdate(Nullable<int> partnerLocationID, Nullable<int> partnerID, string addressLine1, string addressLine2, string city, string state, string country, string zipCode, Nullable<double> latitude, Nullable<double> longitude, string mobileNumber, Nullable<System.DateTime> dateActivated, Nullable<System.DateTime> dateExpiry, string status, ObjectParameter statusResult)
        {
            var partnerLocationIDParameter = partnerLocationID.HasValue ?
                new ObjectParameter("PartnerLocationID", partnerLocationID) :
                new ObjectParameter("PartnerLocationID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var dateActivatedParameter = dateActivated.HasValue ?
                new ObjectParameter("DateActivated", dateActivated) :
                new ObjectParameter("DateActivated", typeof(System.DateTime));
    
            var dateExpiryParameter = dateExpiry.HasValue ?
                new ObjectParameter("DateExpiry", dateExpiry) :
                new ObjectParameter("DateExpiry", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerLocationDetails_InsertUpdate", partnerLocationIDParameter, partnerIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateParameter, countryParameter, zipCodeParameter, latitudeParameter, longitudeParameter, mobileNumberParameter, dateActivatedParameter, dateExpiryParameter, statusParameter, statusResult);
        }
    
        public virtual ObjectResult<SP_FetchPartnerRates_Result1> SP_FetchPartnerRates(Nullable<int> partnerID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerRates_Result1>("SP_FetchPartnerRates", partnerIDParameter);
        }
    
        public virtual int SP_PartnerCharges_InsertUpdate(Nullable<int> partnerChargesID, Nullable<int> partnerID, string frequency, string category, Nullable<double> charges, Nullable<bool> isDefault, string status, ObjectParameter statusResult)
        {
            var partnerChargesIDParameter = partnerChargesID.HasValue ?
                new ObjectParameter("PartnerChargesID", partnerChargesID) :
                new ObjectParameter("PartnerChargesID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(double));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerCharges_InsertUpdate", partnerChargesIDParameter, partnerIDParameter, frequencyParameter, categoryParameter, chargesParameter, isDefaultParameter, statusParameter, statusResult);
        }
    
        public virtual int SP_PartnerRates_InsertUpdate(Nullable<int> iD, Nullable<int> partnerID, string fromRate, string toRate, Nullable<double> guaranteed, Nullable<double> indicative, string status, string rateType, ObjectParameter statusResult)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var fromRateParameter = fromRate != null ?
                new ObjectParameter("FromRate", fromRate) :
                new ObjectParameter("FromRate", typeof(string));
    
            var toRateParameter = toRate != null ?
                new ObjectParameter("ToRate", toRate) :
                new ObjectParameter("ToRate", typeof(string));
    
            var guaranteedParameter = guaranteed.HasValue ?
                new ObjectParameter("Guaranteed", guaranteed) :
                new ObjectParameter("Guaranteed", typeof(double));
    
            var indicativeParameter = indicative.HasValue ?
                new ObjectParameter("Indicative", indicative) :
                new ObjectParameter("Indicative", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var rateTypeParameter = rateType != null ?
                new ObjectParameter("RateType", rateType) :
                new ObjectParameter("RateType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerRates_InsertUpdate", iDParameter, partnerIDParameter, fromRateParameter, toRateParameter, guaranteedParameter, indicativeParameter, statusParameter, rateTypeParameter, statusResult);
        }
    
        public virtual int SP_SystemParam_InsertUpdate(Nullable<int> iD, Nullable<int> partnerID, string key, string displayValue, string value, Nullable<int> parentId, string status, ObjectParameter statusResult)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var displayValueParameter = displayValue != null ?
                new ObjectParameter("DisplayValue", displayValue) :
                new ObjectParameter("DisplayValue", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SystemParam_InsertUpdate", iDParameter, partnerIDParameter, keyParameter, displayValueParameter, valueParameter, parentIdParameter, statusParameter, statusResult);
        }
    
        public virtual int SP_PartnerSettings(Nullable<int> iD, string brandName, string brandLogoPath, string redirectLink, string emailAddress, ObjectParameter statusResult)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var brandLogoPathParameter = brandLogoPath != null ?
                new ObjectParameter("BrandLogoPath", brandLogoPath) :
                new ObjectParameter("BrandLogoPath", typeof(string));
    
            var redirectLinkParameter = redirectLink != null ?
                new ObjectParameter("RedirectLink", redirectLink) :
                new ObjectParameter("RedirectLink", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerSettings", iDParameter, brandNameParameter, brandLogoPathParameter, redirectLinkParameter, emailAddressParameter, statusResult);
        }
    
        public virtual ObjectResult<SP_FetchPartnerSettings_Result> SP_FetchPartnerSettings(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerSettings_Result>("SP_FetchPartnerSettings", iDParameter);
        }
    
        public virtual int SP_FetchPartnerOffersCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FetchPartnerOffersCount");
        }
    
        public virtual int SP_PartnerLocationWorkTime_InsertUpdate(Nullable<int> iD, Nullable<int> partnerId, Nullable<int> locationId, string workDay, string workStartTime, string workEndTime, string status, ObjectParameter statusResult)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var workDayParameter = workDay != null ?
                new ObjectParameter("WorkDay", workDay) :
                new ObjectParameter("WorkDay", typeof(string));
    
            var workStartTimeParameter = workStartTime != null ?
                new ObjectParameter("WorkStartTime", workStartTime) :
                new ObjectParameter("WorkStartTime", typeof(string));
    
            var workEndTimeParameter = workEndTime != null ?
                new ObjectParameter("WorkEndTime", workEndTime) :
                new ObjectParameter("WorkEndTime", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerLocationWorkTime_InsertUpdate", iDParameter, partnerIdParameter, locationIdParameter, workDayParameter, workStartTimeParameter, workEndTimeParameter, statusParameter, statusResult);
        }
    
        public virtual int SP_PartnerDetails_InsertUpdate(Nullable<int> userId, string loginType, string userName, string password, Nullable<int> roleId, string uStatus, string emailAddress, string mobileNumber, Nullable<int> partnerID, string partnerName, string partnerLogoPath, Nullable<System.DateTime> dateExpiry, string pStatus, ObjectParameter statusResult, ObjectParameter statusResultUserId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginTypeParameter = loginType != null ?
                new ObjectParameter("LoginType", loginType) :
                new ObjectParameter("LoginType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var uStatusParameter = uStatus != null ?
                new ObjectParameter("UStatus", uStatus) :
                new ObjectParameter("UStatus", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerLogoPathParameter = partnerLogoPath != null ?
                new ObjectParameter("PartnerLogoPath", partnerLogoPath) :
                new ObjectParameter("PartnerLogoPath", typeof(string));
    
            var dateExpiryParameter = dateExpiry.HasValue ?
                new ObjectParameter("DateExpiry", dateExpiry) :
                new ObjectParameter("DateExpiry", typeof(System.DateTime));
    
            var pStatusParameter = pStatus != null ?
                new ObjectParameter("PStatus", pStatus) :
                new ObjectParameter("PStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PartnerDetails_InsertUpdate", userIdParameter, loginTypeParameter, userNameParameter, passwordParameter, roleIdParameter, uStatusParameter, emailAddressParameter, mobileNumberParameter, partnerIDParameter, partnerNameParameter, partnerLogoPathParameter, dateExpiryParameter, pStatusParameter, statusResult, statusResultUserId);
        }
    
        public virtual ObjectResult<SP_FetchPartnerCharges_Result> SP_FetchPartnerCharges()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerCharges_Result>("SP_FetchPartnerCharges");
        }
    
        public virtual ObjectResult<SP_FetchPartnerChargesByPartnerID_Result> SP_FetchPartnerChargesByPartnerID(Nullable<int> partnerID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerChargesByPartnerID_Result>("SP_FetchPartnerChargesByPartnerID", partnerIDParameter);
        }
    
        public virtual ObjectResult<SP_FetchPartnerDetails_Result> SP_FetchPartnerDetails(string status, string partnerName, Nullable<int> page, Nullable<int> pagedata)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pagedataParameter = pagedata.HasValue ?
                new ObjectParameter("Pagedata", pagedata) :
                new ObjectParameter("Pagedata", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerDetails_Result>("SP_FetchPartnerDetails", statusParameter, partnerNameParameter, pageParameter, pagedataParameter);
        }
    
        public virtual ObjectResult<SP_FetchPartnerLocationDetails_Result> SP_FetchPartnerLocationDetails(Nullable<int> partnerID, string status, string zipCode, string city, Nullable<int> page, Nullable<int> pagedata, ObjectParameter totalCount)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pagedataParameter = pagedata.HasValue ?
                new ObjectParameter("Pagedata", pagedata) :
                new ObjectParameter("Pagedata", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerLocationDetails_Result>("SP_FetchPartnerLocationDetails", partnerIDParameter, statusParameter, zipCodeParameter, cityParameter, pageParameter, pagedataParameter, totalCount);
        }
    
        public virtual ObjectResult<SP_FetchPartnerOffers_Result> SP_FetchPartnerOffers(Nullable<int> iD, string status, string offerName, Nullable<int> page, Nullable<int> pagedata)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var offerNameParameter = offerName != null ?
                new ObjectParameter("OfferName", offerName) :
                new ObjectParameter("OfferName", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pagedataParameter = pagedata.HasValue ?
                new ObjectParameter("Pagedata", pagedata) :
                new ObjectParameter("Pagedata", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchPartnerOffers_Result>("SP_FetchPartnerOffers", iDParameter, statusParameter, offerNameParameter, pageParameter, pagedataParameter);
        }
    
        public virtual ObjectResult<SP_FetchSystemParam_Result> SP_FetchSystemParam()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchSystemParam_Result>("SP_FetchSystemParam");
        }
    
        public virtual ObjectResult<SP_UserLogIn_Result> SP_UserLogIn(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserLogIn_Result>("SP_UserLogIn", userNameParameter, passwordParameter);
        }
    
        public virtual int SP_changePassword(Nullable<int> userId, string oldPassword, string newPassword, ObjectParameter statusResult)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("oldPassword", oldPassword) :
                new ObjectParameter("oldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_changePassword", userIdParameter, oldPasswordParameter, newPasswordParameter, statusResult);
        }
    
        public virtual ObjectResult<SP_FetchLocationWorkTimeDetails_Result> SP_FetchLocationWorkTimeDetails(Nullable<int> partnerID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchLocationWorkTimeDetails_Result>("SP_FetchLocationWorkTimeDetails", partnerIDParameter);
        }
    
        public virtual ObjectResult<SP_forgotPassword_Result1> SP_forgotPassword(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_forgotPassword_Result1>("SP_forgotPassword", emailIdParameter);
        }
    
        public virtual ObjectResult<SP_FetchUnProcessedLocations_Result> SP_FetchUnProcessedLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchUnProcessedLocations_Result>("SP_FetchUnProcessedLocations");
        }
    
        public virtual int SP_UserDetails_InsertUpdate(Nullable<int> userId, string loginType, string userName, string password, Nullable<int> roleId, string uStatus, string firstName, string lastName, string mobileNumber, string email, ObjectParameter statusResult, ObjectParameter statusResultUserId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginTypeParameter = loginType != null ?
                new ObjectParameter("LoginType", loginType) :
                new ObjectParameter("LoginType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var uStatusParameter = uStatus != null ?
                new ObjectParameter("UStatus", uStatus) :
                new ObjectParameter("UStatus", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserDetails_InsertUpdate", userIdParameter, loginTypeParameter, userNameParameter, passwordParameter, roleIdParameter, uStatusParameter, firstNameParameter, lastNameParameter, mobileNumberParameter, emailParameter, statusResult, statusResultUserId);
        }
    
        public virtual ObjectResult<SP_FetchUserRewardPoints_Result> SP_FetchUserRewardPoints(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FetchUserRewardPoints_Result>("SP_FetchUserRewardPoints", userIdParameter);
        }
    
        public virtual int SP_UserLocationTracker_Insert(Nullable<int> userId, Nullable<int> partnerId, Nullable<int> locationId, Nullable<System.DateTime> reachedDestinationAt, ObjectParameter statusResult)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var reachedDestinationAtParameter = reachedDestinationAt.HasValue ?
                new ObjectParameter("ReachedDestinationAt", reachedDestinationAt) :
                new ObjectParameter("ReachedDestinationAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserLocationTracker_Insert", userIdParameter, partnerIdParameter, locationIdParameter, reachedDestinationAtParameter, statusResult);
        }
    
        public virtual int SP_UserQRCodeTracker_Insert(Nullable<int> userId, string locationId, Nullable<int> partnerId, Nullable<double> transactionAmount, string fromCurrency, string toCurrency, Nullable<System.DateTime> dateScanned, ObjectParameter statusResult)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(double));
    
            var fromCurrencyParameter = fromCurrency != null ?
                new ObjectParameter("FromCurrency", fromCurrency) :
                new ObjectParameter("FromCurrency", typeof(string));
    
            var toCurrencyParameter = toCurrency != null ?
                new ObjectParameter("ToCurrency", toCurrency) :
                new ObjectParameter("ToCurrency", typeof(string));
    
            var dateScannedParameter = dateScanned.HasValue ?
                new ObjectParameter("DateScanned", dateScanned) :
                new ObjectParameter("DateScanned", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserQRCodeTracker_Insert", userIdParameter, locationIdParameter, partnerIdParameter, transactionAmountParameter, fromCurrencyParameter, toCurrencyParameter, dateScannedParameter, statusResult);
        }
    
        public virtual int SP_UserRewardPoints_Insert(Nullable<int> userId, string transactionId, string rewardPointsEarned, Nullable<System.DateTime> dateEarned, string comments, ObjectParameter statusResult)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var rewardPointsEarnedParameter = rewardPointsEarned != null ?
                new ObjectParameter("RewardPointsEarned", rewardPointsEarned) :
                new ObjectParameter("RewardPointsEarned", typeof(string));
    
            var dateEarnedParameter = dateEarned.HasValue ?
                new ObjectParameter("DateEarned", dateEarned) :
                new ObjectParameter("DateEarned", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserRewardPoints_Insert", userIdParameter, transactionIdParameter, rewardPointsEarnedParameter, dateEarnedParameter, commentsParameter, statusResult);
        }
    
        public virtual int SP_UserSearchTracker_Insert(Nullable<int> userId, string city, string country, string zipCode, Nullable<double> latitude, Nullable<double> longitude, Nullable<double> amount, string fromCurrency, string toCurrency, Nullable<System.DateTime> dateSearched, Nullable<int> resultsCount, ObjectParameter statusResult)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var fromCurrencyParameter = fromCurrency != null ?
                new ObjectParameter("FromCurrency", fromCurrency) :
                new ObjectParameter("FromCurrency", typeof(string));
    
            var toCurrencyParameter = toCurrency != null ?
                new ObjectParameter("ToCurrency", toCurrency) :
                new ObjectParameter("ToCurrency", typeof(string));
    
            var dateSearchedParameter = dateSearched.HasValue ?
                new ObjectParameter("DateSearched", dateSearched) :
                new ObjectParameter("DateSearched", typeof(System.DateTime));
    
            var resultsCountParameter = resultsCount.HasValue ?
                new ObjectParameter("ResultsCount", resultsCount) :
                new ObjectParameter("ResultsCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserSearchTracker_Insert", userIdParameter, cityParameter, countryParameter, zipCodeParameter, latitudeParameter, longitudeParameter, amountParameter, fromCurrencyParameter, toCurrencyParameter, dateSearchedParameter, resultsCountParameter, statusResult);
        }
    }
}
