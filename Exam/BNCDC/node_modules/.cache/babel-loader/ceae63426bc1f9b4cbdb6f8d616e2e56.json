{"ast":null,"code":"export function setUserInLocalStorage(user) {\n  localStorage.setItem('user', JSON.stringify(user));\n}\nexport function getUserFromLocalStorage() {\n  var user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n}\nexport function removeUserFromLocalStorage() {\n  localStorage.removeItem('user');\n}\nexport function getUniqueId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\nexport function getFileName(code, year) {\n  return \"\".concat(code, \"-\").concat(year, \".json\");\n}\nexport function getTime() {\n  return new Date().getTime();\n}\nexport function getDate(date) {\n  var today = new Date(date);\n  var dd = today.getDate();\n  var mm = today.getMonth() + 1; //January is 0!\n\n  var yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  return dd + '/' + mm + '/' + yyyy;\n}\nexport function getValue(value) {\n  return isNaN(value) ? 0 : +value;\n}\nexport function getVersion2Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var credit = 0;\n    var gto = 0;\n    var gt = 0;\n    var ito = 0;\n    var it = 0;\n    var eto = 0;\n    var et = 0;\n    var result = 'PASS';\n    row.papers.forEach(function (paper) {\n      credit += paper.credits;\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      paper._internal = internal.marksObtained;\n      paper._internal_max = internal.maximum;\n      ito += getValue(paper._internal);\n      it += getValue(paper._internal_max);\n      paper._external = external.marksObtained;\n      paper._external_max = external.maximum;\n      paper._grace = grace.marksObtained || 0;\n      eto += getValue(paper._external) + getValue(paper._grace);\n      et += getValue(paper._external_max);\n      paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n      paper._total = +internal.maximum + +external.maximum;\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._internal_total_o = ito;\n    row._internal_total = it;\n    row._external_total_o = eto;\n    row._external_total = et;\n    row._credits = credit;\n    row._grand_total = gto;\n    row._total = gt;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._grade = grade.code;\n\n    if (row._grade === 'F') {\n      result = 'FAIL';\n    }\n\n    row._result = result;\n  });\n  return state;\n}\nexport function getVersion1Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    row._result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      row._internal = internal.marksObtained;\n      row._internal_max = internal.maximum;\n      row._external = external.marksObtained;\n      row._external_max = external.maximum;\n      row._grace = grace.marksObtained || 0;\n      row._totalObtained = getValue(row._internal) + getValue(row._external) + getValue(row._grace);\n      row._total = +internal.maximum + +external.maximum;\n\n      if (row._grace > 0) {\n        row._external = \"\".concat(row._external, \" + \").concat(row._grace);\n      }\n\n      var percent = row._totalObtained * 100 / row._total;\n      row._percent = percent.toFixed(2);\n      var grade = getGrade(Math.round(percent));\n      row._grade = grade.code;\n\n      if (row._grade === 'F') {\n        row._result = 'FAIL';\n      }\n    });\n  });\n  return state;\n}\nexport function getVersion3Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var gto = 0;\n    var gt = 0;\n    var ito = 0;\n    var it = 0;\n    var eto = 0;\n    var et = 0;\n    var ato = 0;\n    var at = 0;\n    var result = 'PASS';\n    var isATKT = false;\n    var t_g = 0;\n    row.papers.forEach(function (paper) {\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {};\n      var academic = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Academic Performance';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      paper._internal = internal.marksObtained;\n      paper._internal_max = internal.maximum;\n      ito += getValue(paper._internal);\n      it += getValue(paper._internal_max);\n      paper._external = external.marksObtained;\n      paper._external_max = external.maximum;\n      paper._academic = academic.marksObtained;\n      paper._academic_max = academic.maximum;\n      paper._grace = grace.marksObtained || 0;\n      t_g += getValue(paper._grace);\n      eto += getValue(paper._external) + getValue(paper._grace);\n      et += getValue(paper._external_max);\n      ato += getValue(paper._academic);\n      at += getValue(paper._academic_max);\n      paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._academic) + getValue(paper._grace);\n      paper._total = +internal.maximum + +external.maximum + +academic.maximum;\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        isATKT = true;\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._internal_total_o = ito;\n    row._internal_total = it;\n    row._external_total_o = eto;\n    row._external_total = et;\n    row._academic_total_o = ato;\n    row._academic_total = at;\n    row._grand_total = gto;\n    row._total = gt;\n    row._total_grace = t_g;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._percent = row._percent + \"%\";\n    row._grade = grade.code;\n\n    if (row._grade === 'F' || isATKT) {\n      result = 'ATKT';\n      row._grade = \"-\";\n      row._percent = \"-\";\n    }\n\n    row._result = result;\n  });\n  return state;\n}\nexport function getVersion4Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var gto = 0;\n    var gt = 0;\n    var result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var attendance = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Attendance';\n      }) || {};\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {}; //const semester = paper.paperDetails.find((detail) => detail.title === 'Semester') || {}\n\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      paper._attendance = attendance.marksObtained;\n      paper._attendance_max = attendance.maximum;\n      paper._internal = internal.marksObtained;\n      paper._internal_max = internal.maximum;\n      paper._external = external.marksObtained;\n      paper._external_max = external.maximum; //paper._semester = semester.marksObtained;\n      //paper._semester_max = semester.maximum;\n\n      paper._grace = grace.marksObtained || 0;\n      paper._totalObtained = getValue(paper._attendance) + getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace); //paper._totalObtained = getValue( paper._attendance) + getValue(paper._unitTest) + getValue(paper._assesment) + getValue(paper._semester) +  getValue(paper._grace);\n\n      paper._total = +attendance.maximum + +internal.maximum + +external.maximum; // + +semester.maximum;\n\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._grand_total = gto;\n    row._total = gt;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._grade = grade.code;\n\n    if (row._grade === 'F') {\n      result = 'FAIL';\n    }\n\n    row._result = result;\n  });\n  return state;\n}\nexport function getVersion5Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    row._result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var written = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Written';\n      }) || {};\n      var submission = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Submission';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      var practical = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Practical';\n      }) || {};\n      var general = paper.paperDetails.find(function (detail) {\n        return detail.title === 'General';\n      }) || {};\n      row._written = written.marksObtained;\n      row._written_max = written.maximum;\n      row._submission = submission.marksObtained;\n      row._submission_max = submission.maximum;\n      row._practical = practical.marksObtained;\n      row._practical_max = practical.maximum;\n      row._general = general.marksObtained;\n      row._general_max = general.maximum;\n      row._grace = grace.marksObtained || 0;\n      row._totalObtained = getValue(row._written) + getValue(row._submission) + getValue(row._practical) + getValue(row._general) + getValue(row._grace);\n      row._total = +written.maximum + +submission.maximum + +practical.maximum + +general.maximum;\n\n      if (row._grace > 0) {\n        row._general = \"\".concat(row._general, \" + \").concat(row._grace);\n      }\n\n      var percent = row._totalObtained * 100 / row._total;\n      row._percent = percent.toFixed(2);\n      var grade = getGrade(Math.round(percent));\n      row._grade = grade.code;\n\n      if (row._grade === 'F') {\n        row._result = 'FAIL';\n      }\n    });\n  });\n  return state;\n}\nexport function getVersion6Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var credit = 0;\n    var gto = 0;\n    var gt = 0;\n    var finalGrade = \"PASS\";\n    var result = 'PASS';\n    var totalGrace = 0;\n    var graceCounter = 0;\n    var paperGrace = 0;\n    var paperGraceCounter = 0;\n    row.papers.forEach(function (paper) {\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      var unit1 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'UT I (A)';\n      }) || {};\n      var unit2 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'UT II (B)';\n      }) || {};\n      var term1 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'TERM I (C)';\n      }) || {};\n      var term2 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'TERM II (D)';\n      }) || {};\n      var grade = paper.paperDetails.find(function (detail) {\n        return detail.title === \"Grade\";\n      }) || {};\n      var language = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Language';\n      }) || {};\n      var elective = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Elective';\n      }) || {};\n      paper._unit1 = unit1.marksObtained;\n      paper._unit1_max = unit1.maximum;\n      paper._unit2 = unit2.marksObtained;\n      paper._unit2_max = unit2.maximum;\n      paper._term1 = term1.marksObtained;\n      paper._term1_max = term1.maximum;\n      paper._term2 = term2.marksObtained;\n      paper._term2_max = term2.maximum;\n      paper._grace = grace.marksObtained || 0;\n      totalGrace += Math.round(paper._grace);\n\n      if (paper.paperTitle === \"Physical Education\" || paper.paperTitle === \"PHY. EDU.\") {\n        paper._grade = grade.marksObtained;\n        paper._unit1 = '-';\n        paper._unit2 = '-';\n        paper._term1 = '-';\n        paper._term2 = '-';\n        paper._max = '-';\n        paper._min = '-';\n        paper._obtained = '-';\n        paper._totalObtained = grade.marksObtained;\n      } else if (paper.paperTitle === \"E.V.S.\") {\n        paper._obtained = getValue(paper._term2);\n        paper._max = term2.maximum;\n        paper._total = getValue(term2.maximum);\n        paper._min = term2.passing;\n        paper._totalObtained = getValue(paper._obtained);\n        var percent = paper._totalObtained * 100 / paper._total;\n\n        var _grade = getGrade(Math.round(percent));\n\n        paper._grade = _grade.code;\n        paper._unit1 = '-';\n        paper._unit2 = '-';\n        paper._term1 = '-';\n        paper._term2 = '-';\n      } else {\n        paper._obtained = getValue(paper._unit1) + getValue(paper._unit2) + getValue(paper._term1) + getValue(paper._term2);\n        paper._max = (getValue(unit1.maximum) + getValue(unit2.maximum) + getValue(term1.maximum) + getValue(term2.maximum)) / 2;\n        paper._total = (getValue(unit1.maximum) + getValue(unit2.maximum) + getValue(term1.maximum) + getValue(term2.maximum)) / 2;\n        paper._min = paper._total * (35 / 100);\n        paper._totalObtained = Math.round(getValue(paper._obtained) / 2);\n\n        if (paper._totalObtained < 35) {\n          paperGrace = 35 - paper._totalObtained;\n\n          if (paperGrace <= 10 && graceCounter + paperGrace <= 15 && paperGraceCounter < 4) {\n            paper._grace = paperGrace;\n            graceCounter += paperGrace;\n            paperGraceCounter += 1;\n          }\n        }\n\n        if (language && language.title == \"Language\") {\n          paper.paperTitle = language.marksObtained;\n        } else if (elective && elective.title == \"Elective\") {\n          paper.paperTitle = elective.marksObtained;\n        }\n\n        var _percent = paper._totalObtained * 100 / paper._total;\n\n        var mo = Math.round(Math.round(Math.round(paper._totalObtained) + Math.round(paper._grace)) * 100);\n\n        var _grade2 = getGrade(Math.round(mo / paper._total));\n\n        paper._grade = _grade2.code;\n      }\n\n      if (paper._grade === 'FAIL') {\n        result = 'FAIL';\n      }\n\n      gto += getValue(paper._totalObtained);\n      gt += getValue(paper._total);\n    });\n    row._credits = credit;\n    row._grand_total = gto;\n    row._total = gt;\n    row._totalGrace = graceCounter;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n\n    if (result == \"FAIL\") {\n      row._grade = \"F\";\n      row._result = result;\n    } else if (result == \"PASS\" && Math.round(row._totalGrace) > 0) {\n      row._grade = \"\";\n      row._result = \"GRACE\";\n    } else {\n      row._grade = grade.code;\n      row._result = result;\n    }\n    /*if(row._grade === 'FAIL')\n    {\n        result = 'FAIL';\n    }*/\n\n  });\n  return state;\n}","map":{"version":3,"sources":["D:\\VancoTechnologies\\Code\\Exam\\BNCDC\\Common\\src\\util.js"],"names":["setUserInLocalStorage","user","localStorage","setItem","JSON","stringify","getUserFromLocalStorage","getItem","parse","removeUserFromLocalStorage","removeItem","getUniqueId","Math","random","toString","substr","getFileName","code","year","getTime","Date","getDate","date","today","dd","mm","getMonth","yyyy","getFullYear","getValue","value","isNaN","getVersion2Data","state","grades","getGrade","percent","find","grade","start","end","rows","forEach","row","credit","gto","gt","ito","it","eto","et","result","papers","paper","credits","internal","paperDetails","detail","title","external","grace","isGrace","_internal","marksObtained","_internal_max","maximum","_external","_external_max","_grace","_totalObtained","_total","round","_grade","_internal_total_o","_internal_total","_external_total_o","_external_total","_credits","_grand_total","_percent","toFixed","_result","getVersion1Data","getVersion3Data","ato","at","isATKT","t_g","academic","_academic","_academic_max","_academic_total_o","_academic_total","_total_grace","getVersion4Data","attendance","_attendance","_attendance_max","getVersion5Data","written","submission","practical","general","_written","_written_max","_submission","_submission_max","_practical","_practical_max","_general","_general_max","getVersion6Data","finalGrade","totalGrace","graceCounter","paperGrace","paperGraceCounter","unit1","unit2","term1","term2","language","elective","_unit1","_unit1_max","_unit2","_unit2_max","_term1","_term1_max","_term2","_term2_max","paperTitle","_max","_min","_obtained","passing","mo","_totalGrace"],"mappings":"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","sourcesContent":["export function setUserInLocalStorage(user)\n{\n    localStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function getUserFromLocalStorage()\n{\n    const user =  localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n}\n\nexport function removeUserFromLocalStorage()\n{\n    localStorage.removeItem('user');\n}\n\nexport function getUniqueId()\n{\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nexport function getFileName(code, year)\n{\n    return  `${code}-${year}.json`;\n}\n\nexport function getTime()\n{\n    return (new Date()).getTime();\n}\n\nexport function getDate(date)\n{\n    let today = new Date(date);\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1; //January is 0!\n\n    let yyyy = today.getFullYear();\n    if (dd < 10) {\n    dd = '0' + dd;\n    } \n    if (mm < 10) {\n    mm = '0' + mm;\n    } \n    return dd + '/' + mm + '/' + yyyy;\n}\n\nexport function getValue(value) {\n    return isNaN(value) ? 0 : +value;\n}\n\nexport function getVersion2Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let credit = 0;\n        let gto = 0;\n        let gt = 0\n        let ito = 0;\n        let it = 0;\n        let eto = 0;\n        let et = 0;\n        let result = 'PASS';\n\n        row.papers.forEach((paper) => {\n            credit += paper.credits;\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {};\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            paper._internal = internal.marksObtained;\n            paper._internal_max = internal.maximum;\n            \n            ito += getValue(paper._internal);\n            it += getValue(paper._internal_max);\n\n            paper._external = external.marksObtained;\n            paper._external_max = external.maximum;\n            paper._grace = grace.marksObtained || 0;\n           \n            eto += getValue(paper._external) + getValue(paper._grace);\n            et += getValue(paper._external_max);\n\n            paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n            paper._total = +internal.maximum + +external.maximum;\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n        row._internal_total_o = ito;\n        row._internal_total = it;\n\n        row._external_total_o = eto;\n        row._external_total = et;\n\n        row._credits = credit;\n        row._grand_total = gto;\n        row._total = gt; \n        \n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        row._grade = grade.code;\n        if(row._grade === 'F')\n        {\n            result = 'FAIL';\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}\n\nexport function getVersion1Data(state, grades)\n{   \n    state.date = state.date ? getDate(state.date) : '';\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n    state.rows.forEach((row) => {\n        row._result = 'PASS';\n        row.papers.forEach((paper) => {\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {};\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            row._internal = internal.marksObtained;\n            row._internal_max = internal.maximum;\n            \n          \n            row._external = external.marksObtained;\n            row._external_max = external.maximum;\n            row._grace = grace.marksObtained || 0;\n            row._totalObtained = getValue(row._internal) + getValue(row._external) + getValue(row._grace);\n            row._total = +internal.maximum + +external.maximum;\n            \n            if(row._grace > 0)\n            {\n                row._external = `${row._external} + ${row._grace}`;\n            }\n\n            const percent = (row._totalObtained * 100) / row._total;\n            row._percent = percent.toFixed(2);\n            const grade = getGrade(Math.round(percent));\n            row._grade = grade.code;\n            if(row._grade === 'F')\n            {\n                row._result = 'FAIL';\n            }   \n        })\n\n    })\n    return state;\n}\n\nexport function getVersion3Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let gto = 0;\n        let gt = 0\n        let ito = 0;\n        let it = 0;\n        let eto = 0;\n        let et = 0;\n\t\tlet ato = 0;\n\t\tlet at = 0;\n\t\t\n        let result = 'PASS';\n\t\tlet isATKT = false;\n        let t_g = 0;\n\n        row.papers.forEach((paper) => {\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {};\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {};\n\t\t\tconst academic = paper.paperDetails.find((detail) => detail.title === 'Academic Performance') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            paper._internal = internal.marksObtained;\n            paper._internal_max = internal.maximum;\n            \n            ito += getValue(paper._internal);\n            it += getValue(paper._internal_max);\n\n            paper._external = external.marksObtained;\n            paper._external_max = external.maximum;\n\t\t\t\n\t\t\tpaper._academic = academic.marksObtained;\n\t\t\tpaper._academic_max = academic.maximum;\n\t\t\t\n            paper._grace = grace.marksObtained || 0;\n\n            t_g +=  getValue(paper._grace);\n           \n            eto += getValue(paper._external) + getValue(paper._grace);\n            et += getValue(paper._external_max);\n\t\t\t\n\t\t\tato +=  getValue(paper._academic);\n\t\t\tat += getValue(paper._academic_max);\n\n            paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._academic) + getValue(paper._grace);\n            paper._total = +internal.maximum + +external.maximum + +academic.maximum;\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n\t\t\t\tisATKT = true;\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n        row._internal_total_o = ito;\n        row._internal_total = it;\n\n        row._external_total_o = eto;\n        row._external_total = et;\n\t\t\n\t\trow._academic_total_o = ato;\n\t\trow._academic_total = at;\n\n        row._grand_total = gto;\n        row._total = gt; \n\n        row._total_grace = t_g;\n        \n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n\t\trow._percent = row._percent + \"%\";\n        row._grade = grade.code;\n        if(row._grade === 'F' || isATKT)\n        {\n            result = 'ATKT';\n\t\t\trow._grade = \"-\";\n\t\t\trow._percent = \"-\";\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}\n\nexport function getVersion4Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let gto = 0;\n        let gt = 0\n        let result = 'PASS';\n\n        row.papers.forEach((paper) => {\n\n            const attendance = paper.paperDetails.find((detail) => detail.title === 'Attendance') || {}\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {}\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {}\n            //const semester = paper.paperDetails.find((detail) => detail.title === 'Semester') || {}\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n\n            paper._attendance = attendance.marksObtained;\n            paper._attendance_max = attendance.maximum;\n\n            paper._internal = internal.marksObtained;\n            paper._internal_max = internal.maximum;\n\n            paper._external = external.marksObtained;\n            paper._external_max = external.maximum;\n\n            //paper._semester = semester.marksObtained;\n            //paper._semester_max = semester.maximum;\n\n            paper._grace = grace.marksObtained || 0;\n\n\t\t\tpaper._totalObtained = getValue( paper._attendance) + getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n            //paper._totalObtained = getValue( paper._attendance) + getValue(paper._unitTest) + getValue(paper._assesment) + getValue(paper._semester) +  getValue(paper._grace);\n            paper._total = +attendance.maximum + +internal.maximum + +external.maximum;// + +semester.maximum;\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n\n        row._grand_total = gto;\n        row._total = gt; \n\n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        row._grade = grade.code;\n        if(row._grade === 'F')\n        {\n            result = 'FAIL';\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}\n\nexport function getVersion5Data(state, grades)\n{   \n    state.date = state.date ? getDate(state.date) : '';\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n    state.rows.forEach((row) => {\n        row._result = 'PASS';\n        row.papers.forEach((paper) => {\n            const written = paper.paperDetails.find((detail) => detail.title === 'Written') || {};\n            const submission = paper.paperDetails.find((detail) => detail.title === 'Submission') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            const practical = paper.paperDetails.find((detail) => detail.title === 'Practical') || {};\n            const general = paper.paperDetails.find((detail) => detail.title === 'General') || {};\n\n\n            row._written = written.marksObtained;\n            row._written_max = written.maximum;\n            \n            row._submission = submission.marksObtained;\n            row._submission_max = submission.maximum;\n            \n            row._practical = practical.marksObtained;\n            row._practical_max = practical.maximum;\n\n            row._general = general.marksObtained;\n            row._general_max = general.maximum;\n\n            row._grace = grace.marksObtained || 0;\n            \n            \n            row._totalObtained = getValue(row._written) + getValue(row._submission) +  getValue(row._practical) +  getValue(row._general) + getValue(row._grace);\n            row._total = +written.maximum + +submission.maximum + +practical.maximum + +general.maximum;\n            \n            if(row._grace > 0)\n            {\n                row._general = `${row._general} + ${row._grace}`;\n            }\n\n            const percent = (row._totalObtained * 100) / row._total;\n            row._percent = percent.toFixed(2);\n            const grade = getGrade(Math.round(percent));\n            row._grade = grade.code;\n            if(row._grade === 'F')\n            {\n                row._result = 'FAIL';\n            }   \n        })\n\n    })\n    return state;\n}\n\nexport function getVersion6Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let credit = 0;\n        let gto = 0;\n        let gt = 0\n        let finalGrade = \"PASS\";\n        let result = 'PASS';\n\t\tlet totalGrace = 0;\n\t\tlet graceCounter = 0;\n\t\tlet paperGrace = 0;\n\t\tlet paperGraceCounter = 0;\n\t\t\n        row.papers.forEach((paper) => {\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n\t\t\tconst unit1 = paper.paperDetails.find((detail) => detail.title === 'UT I (A)') || {};\n\t\t\tconst unit2 = paper.paperDetails.find((detail) => detail.title === 'UT II (B)') || {};\n            const term1 = paper.paperDetails.find((detail) => detail.title === 'TERM I (C)') || {};\n            const term2 = paper.paperDetails.find((detail) => detail.title === 'TERM II (D)') || {};\n            \n\t\t\t\n            const grade = paper.paperDetails.find((detail) => detail.title === \"Grade\") || {};\n\t\t\tconst language = paper.paperDetails.find((detail) => detail.title === 'Language') || {};\n\t\t\tconst elective = paper.paperDetails.find((detail) => detail.title === 'Elective') || {};\n\t\t\t\n\t\t\tpaper._unit1 = unit1.marksObtained;\n\t\t\tpaper._unit1_max = unit1.maximum;\n\t\t\tpaper._unit2 = unit2.marksObtained;\n\t\t\tpaper._unit2_max = unit2.maximum;\n\t\t\t\n\t\t\tpaper._term1 = term1.marksObtained;\n\t\t\tpaper._term1_max = term1.maximum;\n            paper._term2 = term2.marksObtained;\n\t\t\tpaper._term2_max = term2.maximum;\n\t\t\t\n            paper._grace = grace.marksObtained || 0;\n\t\t\ttotalGrace += Math.round(paper._grace);\n           if(paper.paperTitle === \"Physical Education\" || paper.paperTitle === \"PHY. EDU.\")\n           {\n                paper._grade = grade.marksObtained;\n                paper._unit1 = '-';\n                paper._unit2 = '-';\n                paper._term1 = '-';\n                paper._term2 = '-';\n                paper._max = '-';\n                paper._min = '-';\n\t\t\t\tpaper._obtained = '-';\n                paper._totalObtained = grade.marksObtained;\n           }\n           else if(paper.paperTitle === \"E.V.S.\")\n           {\n                paper._obtained = getValue(paper._term2);\n                paper._max =  term2.maximum;\n                paper._total = getValue(term2.maximum);\n                paper._min = term2.passing;\n                paper._totalObtained = getValue(paper._obtained);\n                \n                let percent = (paper._totalObtained * 100) / paper._total;\n                let grade = getGrade(Math.round(percent));\n                paper._grade = grade.code;\n\n                paper._unit1 = '-';\n                paper._unit2 = '-';\n                paper._term1 = '-';\n                paper._term2 = '-';\n           }\n           else\n           {  \n\t\t\t   \t\n               paper._obtained = getValue(paper._unit1) + getValue(paper._unit2) + getValue(paper._term1) + getValue(paper._term2);\n               paper._max = (getValue(unit1.maximum) + getValue(unit2.maximum)  + getValue(term1.maximum) + getValue(term2.maximum)) / 2;\n               paper._total = (getValue(unit1.maximum) + getValue(unit2.maximum)  + getValue(term1.maximum) + getValue(term2.maximum)) / 2;\n               paper._min = paper._total * (35/100);\n               paper._totalObtained = Math.round(getValue(paper._obtained) / 2);\n               \n\t\t\t   if(paper._totalObtained < 35){\n\t\t\t\t   paperGrace = 35 - paper._totalObtained;\n\t\t\t\t   if(paperGrace <= 10 && (graceCounter + paperGrace) <= 15 && paperGraceCounter < 4){\n\t\t\t\t\t   paper._grace = paperGrace;\n\t\t\t\t\t   graceCounter += paperGrace;\n\t\t\t\t\t   paperGraceCounter += 1;\n\t\t\t\t   }\n\t\t\t   }\n\t\t\t   \n\t\t\t   if(language && language.title == \"Language\"){\n\t\t\t\t   paper.paperTitle = language.marksObtained;\n\t\t\t   }\n\t\t\t   else if(elective && elective.title == \"Elective\"){\n\t\t\t\t   paper.paperTitle = elective.marksObtained;\n\t\t\t   }\n\t\t\t   \n               let  percent = (paper._totalObtained * 100) / paper._total;\n\t\t\t   let mo = Math.round(Math.round(Math.round(paper._totalObtained) + Math.round(paper._grace))  * 100);\n               let grade = getGrade(Math.round(mo / paper._total));\n               paper._grade = grade.code;\n            }\n            if(paper._grade === 'FAIL')\n            {\n                result = 'FAIL';\n            }\n\t\t\t\n            gto +=  getValue(paper._totalObtained);\n            gt += getValue(paper._total) ;\n        })\n        \n        row._credits = credit;\n        row._grand_total = gto;\n        row._total = gt; \n        row._totalGrace = graceCounter;\n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        \n\t\tif(result == \"FAIL\")\n\t\t{\n\t\t\trow._grade = \"F\";\n\t\t\trow._result = result;\n\t\t}\n\t\telse if\t(result == \"PASS\" && Math.round(row._totalGrace) > 0){\n\t\t\trow._grade = \"\";\n\t\t\trow._result = \"GRACE\";\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\trow._grade = grade.code;\n\t\t\trow._result = result;\n\t\t}\n\t\t\n        /*if(row._grade === 'FAIL')\n        {\n            result = 'FAIL';\n        }*/ \n        \n    })\n    \n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}