{"ast":null,"code":"export function setUserInLocalStorage(user) {\n  localStorage.setItem('user', JSON.stringify(user));\n}\nexport function getUserFromLocalStorage() {\n  var user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n}\nexport function removeUserFromLocalStorage() {\n  localStorage.removeItem('user');\n}\nexport function getUniqueId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\nexport function getFileName(code, year) {\n  return \"\".concat(code, \"-\").concat(year, \".json\");\n}\nexport function getTime() {\n  return new Date().getTime();\n}\nexport function getDate(date) {\n  var today = new Date(date);\n  var dd = today.getDate();\n  var mm = today.getMonth() + 1; //January is 0!\n\n  var yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  return dd + '/' + mm + '/' + yyyy;\n}\nexport function getValue(value) {\n  return isNaN(value) ? 0 : +value;\n}\nexport function getVersion2Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var credit = 0;\n    var gto = 0;\n    var gt = 0;\n    var ito = 0;\n    var it = 0;\n    var eto = 0;\n    var et = 0;\n    var uto = 0;\n    var ut = 0;\n    var result = 'PASS';\n    row.papers.forEach(function (paper) {\n      credit += paper.credits;\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      var unit1 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'unit1';\n      }) || {};\n      var unit2 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'unit2';\n      }) || {};\n      var term1 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'term1';\n      }) || {};\n      var term2 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'term2';\n      }) || {};\n      paper._internal = internal.marksObtained;\n      paper._internal_max = internal.maximum;\n      paper._external = external.marksObtained;\n      paper._external_max = external.maximum;\n      paper._unit1 = unit1.marksObtained;\n      paper._unit1_max = unit1.maximum;\n      paper._unit2 = unit2.marksObtained;\n      paper._unit2_max = unit2.maximum;\n      paper._term1 = term1.marksObtained;\n      paper._term1_max = term1.maximum;\n      paper._term2 = term2.marksObtained;\n      paper._term2_max = term2.maximum;\n      ito += getValue(paper._internal);\n      it += getValue(paper._internal_max);\n      paper._grace = grace.marksObtained || 0;\n      eto += getValue(paper._external) + getValue(paper._grace);\n      et += getValue(paper._external_max);\n      paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n      paper._total = +internal.maximum + +external.maximum;\n\n      if (paper._unit1) {\n        paper._obtained = getValue(paper._unit1) + getValue(paper._unit2) + getValue(paper._term1) + getValue(paper._term2) + getValue(paper._grace);\n        paper._max = (unit1.maximum + unit2.maximum + term1.maximum + term2.maximum) / 2;\n        paper._min = paper._total * (35 / 100);\n        paper._total = (+unit1.maximum + +unit2.maximum + +term1.maximum + +term2.maximum) / 2;\n        paper._totalObtained = getValue(paper._obtained) / 2;\n      }\n\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._internal_total_o = ito;\n    row._internal_total = it;\n    row._external_total_o = eto;\n    row._external_total = et;\n    row._credits = credit;\n    row._grand_total = gto;\n    row._total = gt;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._grade = grade.code;\n\n    if (row._grade === 'F') {\n      result = 'FAIL';\n    }\n\n    row._result = result;\n  });\n  return state;\n}\nexport function getVersion1Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    row._result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      row._internal = internal.marksObtained;\n      row._internal_max = internal.maximum;\n      row._external = external.marksObtained;\n      row._external_max = external.maximum;\n      row._grace = grace.marksObtained || 0;\n      row._totalObtained = getValue(row._internal) + getValue(row._external) + getValue(row._grace);\n      row._total = +internal.maximum + +external.maximum;\n\n      if (row._grace > 0) {\n        row._external = \"\".concat(row._external, \" + \").concat(row._grace);\n      }\n\n      var percent = row._totalObtained * 100 / row._total;\n      row._percent = percent.toFixed(2);\n      var grade = getGrade(Math.round(percent));\n      row._grade = grade.code;\n\n      if (row._grade === 'F') {\n        row._result = 'FAIL';\n      }\n    });\n  });\n  return state;\n}\nexport function getVersion3Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var gto = 0;\n    var gt = 0;\n    var ito = 0;\n    var it = 0;\n    var eto = 0;\n    var et = 0;\n    var result = 'PASS';\n    var t_g = 0;\n    row.papers.forEach(function (paper) {\n      var internal = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Internal';\n      }) || {};\n      var external = paper.paperDetails.find(function (detail) {\n        return detail.title === 'External';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      paper._internal = internal.marksObtained;\n      paper._internal_max = internal.maximum;\n      ito += getValue(paper._internal);\n      it += getValue(paper._internal_max);\n      paper._external = external.marksObtained;\n      paper._external_max = external.maximum;\n      paper._grace = grace.marksObtained || 0;\n      t_g += paper._grace;\n      eto += getValue(paper._external) + getValue(paper._grace);\n      et += getValue(paper._external_max);\n      paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n      paper._total = +internal.maximum + +external.maximum;\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._internal_total_o = ito;\n    row._internal_total = it;\n    row._external_total_o = eto;\n    row._external_total = et;\n    row._grand_total = gto;\n    row._total = gt;\n    row._total_grace = t_g;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._grade = grade.code;\n\n    if (row._grade === 'F') {\n      result = 'FAIL';\n    }\n\n    row._result = result;\n  });\n  return state;\n}\nexport function getVersion4Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var gto = 0;\n    var gt = 0;\n    var result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var attendance = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Attendance';\n      }) || {};\n      var unitTest = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Unit Test';\n      }) || {};\n      var assesment = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Assessment';\n      }) || {};\n      var semester = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Semester';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      paper._attendance = attendance.marksObtained;\n      paper._attendance_max = attendance.maximum;\n      paper._unitTest = unitTest.marksObtained;\n      paper._unitTest_max = unitTest.maximum;\n      paper._assesment = assesment.marksObtained;\n      paper._assesment_max = assesment.maximum;\n      paper._semester = semester.marksObtained;\n      paper._semester_max = semester.maximum;\n      paper._grace = grace.marksObtained || 0;\n      paper._totalObtained = getValue(paper._attendance) + getValue(paper._unitTest) + getValue(paper._assesment) + getValue(paper._semester) + getValue(paper._grace);\n      paper._total = +attendance.maximum + +unitTest.maximum + +assesment.maximum + +semester.maximum;\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._grand_total = gto;\n    row._total = gt;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._grade = grade.code;\n\n    if (row._grade === 'F') {\n      result = 'FAIL';\n    }\n\n    row._result = result;\n  });\n  return state;\n}\nexport function getVersion5Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    row._result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var written = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Written';\n      }) || {};\n      var submission = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Submission';\n      }) || {};\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      var practical = paper.paperDetails.find(function (detail) {\n        return detail.title === 'Practical';\n      }) || {};\n      var general = paper.paperDetails.find(function (detail) {\n        return detail.title === 'General';\n      }) || {};\n      row._written = written.marksObtained;\n      row._written_max = written.maximum;\n      row._submission = submission.marksObtained;\n      row._submission_max = submission.maximum;\n      row._practical = practical.marksObtained;\n      row._practical_max = practical.maximum;\n      row._general = general.marksObtained;\n      row._general_max = general.maximum;\n      row._grace = grace.marksObtained || 0;\n      row._totalObtained = getValue(row._written) + getValue(row._submission) + getValue(row._practical) + getValue(row._general) + getValue(row._grace);\n      row._total = +written.maximum + +submission.maximum + +practical.maximum + +general.maximum;\n\n      if (row._grace > 0) {\n        row._general = \"\".concat(row._general, \" + \").concat(row._grace);\n      }\n\n      var percent = row._totalObtained * 100 / row._total;\n      row._percent = percent.toFixed(2);\n      var grade = getGrade(Math.round(percent));\n      row._grade = grade.code;\n\n      if (row._grade === 'F') {\n        row._result = 'FAIL';\n      }\n    });\n  });\n  return state;\n}\nexport function getVersion6Data(state, grades) {\n  state.date = state.date ? getDate(state.date) : '';\n\n  var getGrade = function getGrade(percent) {\n    return grades.find(function (grade) {\n      return grade.start <= percent && grade.end >= percent;\n    }) || {};\n  };\n\n  state.rows.forEach(function (row) {\n    var credit = 0;\n    var gto = 0;\n    var gt = 0;\n    var ito = 0;\n    var it = 0;\n    var eto = 0;\n    var et = 0;\n    var uto = 0;\n    var ut = 0;\n    var result = 'PASS';\n    row.papers.forEach(function (paper) {\n      var grace = paper.paperDetails.find(function (detail) {\n        return detail.isGrace;\n      }) || {};\n      var unit1 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'unit1';\n      }) || {};\n      var unit2 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'unit2';\n      }) || {};\n      var term1 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'term1';\n      }) || {};\n      var term2 = paper.paperDetails.find(function (detail) {\n        return detail.title === 'term2';\n      }) || {};\n      paper._unit1 = unit1.marksObtained;\n      paper._unit1_max = unit1.maximum;\n      paper._unit2 = unit2.marksObtained;\n      paper._unit2_max = unit2.maximum;\n      paper._term1 = term1.marksObtained;\n      paper._term1_max = term1.maximum;\n      paper._term2 = term2.marksObtained;\n      paper._term2_max = term2.maximum;\n      paper._grace = grace.marksObtained || 0;\n      paper._obtained = getValue(paper._unit1) + getValue(paper._unit2) + getValue(paper._term1) + getValue(paper._term2) + getValue(paper._grace);\n      paper._max = (unit1.maximum + unit2.maximum + term1.maximum + term2.maximum) / 2;\n      paper._min = paper._total * (35 / 100);\n      paper._total = (+unit1.maximum + +unit2.maximum + +term1.maximum + +term2.maximum) / 2;\n      paper._totalObtained = getValue(paper._obtained) / 2;\n      var percent = paper._totalObtained * 100 / paper._total;\n      var grade = getGrade(Math.round(percent));\n      paper._grade = grade.code;\n\n      if (paper._grade === 'F') {\n        result = 'FAIL';\n      }\n\n      gto += paper._totalObtained;\n      gt += paper._total;\n    });\n    row._credits = credit;\n    row._grand_total = gto;\n    row._total = gt;\n    row._percent = (row._grand_total * 100 / row._total).toFixed(2);\n    var grade = getGrade(Math.round(row._percent));\n    row._grade = grade.code;\n\n    if (row._grade === 'F') {\n      result = 'FAIL';\n    }\n\n    row._result = result;\n  });\n  return state;\n}","map":{"version":3,"sources":["D:\\VancoTechnologies\\Code\\Exam\\BNCDC\\Common\\src\\util.js"],"names":["setUserInLocalStorage","user","localStorage","setItem","JSON","stringify","getUserFromLocalStorage","getItem","parse","removeUserFromLocalStorage","removeItem","getUniqueId","Math","random","toString","substr","getFileName","code","year","getTime","Date","getDate","date","today","dd","mm","getMonth","yyyy","getFullYear","getValue","value","isNaN","getVersion2Data","state","grades","getGrade","percent","find","grade","start","end","rows","forEach","row","credit","gto","gt","ito","it","eto","et","uto","ut","result","papers","paper","credits","internal","paperDetails","detail","title","external","grace","isGrace","unit1","unit2","term1","term2","_internal","marksObtained","_internal_max","maximum","_external","_external_max","_unit1","_unit1_max","_unit2","_unit2_max","_term1","_term1_max","_term2","_term2_max","_grace","_totalObtained","_total","_obtained","_max","_min","round","_grade","_internal_total_o","_internal_total","_external_total_o","_external_total","_credits","_grand_total","_percent","toFixed","_result","getVersion1Data","getVersion3Data","t_g","_total_grace","getVersion4Data","attendance","unitTest","assesment","semester","_attendance","_attendance_max","_unitTest","_unitTest_max","_assesment","_assesment_max","_semester","_semester_max","getVersion5Data","written","submission","practical","general","_written","_written_max","_submission","_submission_max","_practical","_practical_max","_general","_general_max","getVersion6Data"],"mappings":"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","sourcesContent":["export function setUserInLocalStorage(user)\n{\n    localStorage.setItem('user', JSON.stringify(user));\n}\n\nexport function getUserFromLocalStorage()\n{\n    const user =  localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n}\n\nexport function removeUserFromLocalStorage()\n{\n    localStorage.removeItem('user');\n}\n\nexport function getUniqueId()\n{\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nexport function getFileName(code, year)\n{\n    return  `${code}-${year}.json`;\n}\n\nexport function getTime()\n{\n    return (new Date()).getTime();\n}\n\nexport function getDate(date)\n{\n    let today = new Date(date);\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1; //January is 0!\n\n    let yyyy = today.getFullYear();\n    if (dd < 10) {\n    dd = '0' + dd;\n    } \n    if (mm < 10) {\n    mm = '0' + mm;\n    } \n    return dd + '/' + mm + '/' + yyyy;\n}\n\nexport function getValue(value) {\n    return isNaN(value) ? 0 : +value;\n}\n\nexport function getVersion2Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let credit = 0;\n        let gto = 0;\n        let gt = 0\n        let ito = 0;\n        let it = 0;\n        let eto = 0;\n        let et = 0;\n\t\tlet uto = 0;\n\t\tlet ut = 0;\n        let result = 'PASS';\n\n        row.papers.forEach((paper) => {\n            credit += paper.credits;\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {};\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n\t\t\tconst unit1 = paper.paperDetails.find((detail) => detail.title === 'unit1') || {};\n\t\t\tconst unit2 = paper.paperDetails.find((detail) => detail.title === 'unit2') || {};\n            const term1 = paper.paperDetails.find((detail) => detail.title === 'term1') || {};\n\t\t\tconst term2 = paper.paperDetails.find((detail) => detail.title === 'term2') || {};\n\t\t\t\n\t\t\tpaper._internal = internal.marksObtained;\n            paper._internal_max = internal.maximum;\n\t\t\tpaper._external = external.marksObtained;\n            paper._external_max = external.maximum;\n\t\t\t\n\t\t\tpaper._unit1 = unit1.marksObtained;\n\t\t\tpaper._unit1_max = unit1.maximum;\n\t\t\tpaper._unit2 = unit2.marksObtained;\n\t\t\tpaper._unit2_max = unit2.maximum;\n\t\t\t\n\t\t\tpaper._term1 = term1.marksObtained;\n\t\t\tpaper._term1_max = term1.maximum;\n            paper._term2 = term2.marksObtained;\n\t\t\tpaper._term2_max = term2.maximum;\n\t\t\t\n            ito += getValue(paper._internal);\n            it += getValue(paper._internal_max);\n\n            \n            paper._grace = grace.marksObtained || 0;\n           \n            eto += getValue(paper._external) + getValue(paper._grace);\n            et += getValue(paper._external_max);\n\n            paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n\t\t\tpaper._total = +internal.maximum + +external.maximum;\n\t\t\t\n\t\t\tif(paper._unit1){\n\t\t\t\tpaper._obtained = getValue(paper._unit1) + getValue(paper._unit2) + getValue(paper._term1) + getValue(paper._term2) + getValue(paper._grace);\n\t\t\t\tpaper._max = (unit1.maximum + unit2.maximum  + term1.maximum + term2.maximum) / 2;\n\t\t\t\tpaper._min = paper._total * (35/100);\n\t\t\t\tpaper._total = (+unit1.maximum + +unit2.maximum  + +term1.maximum + +term2.maximum) / 2;\n\t\t\t\tpaper._totalObtained = getValue(paper._obtained) / 2;\n\t\t\t}\n\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n        row._internal_total_o = ito;\n        row._internal_total = it;\n\n        row._external_total_o = eto;\n        row._external_total = et;\n\n        row._credits = credit;\n        row._grand_total = gto;\n        row._total = gt; \n        \n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        row._grade = grade.code;\n        if(row._grade === 'F')\n        {\n            result = 'FAIL';\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}\n\nexport function getVersion1Data(state, grades)\n{   \n    state.date = state.date ? getDate(state.date) : '';\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n    state.rows.forEach((row) => {\n        row._result = 'PASS';\n        row.papers.forEach((paper) => {\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {};\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            row._internal = internal.marksObtained;\n            row._internal_max = internal.maximum;\n            \n          \n            row._external = external.marksObtained;\n            row._external_max = external.maximum;\n            row._grace = grace.marksObtained || 0;\n            row._totalObtained = getValue(row._internal) + getValue(row._external) + getValue(row._grace);\n            row._total = +internal.maximum + +external.maximum;\n            \n            if(row._grace > 0)\n            {\n                row._external = `${row._external} + ${row._grace}`;\n            }\n\n            const percent = (row._totalObtained * 100) / row._total;\n            row._percent = percent.toFixed(2);\n            const grade = getGrade(Math.round(percent));\n            row._grade = grade.code;\n            if(row._grade === 'F')\n            {\n                row._result = 'FAIL';\n            }   \n        })\n\n    })\n    return state;\n}\n\nexport function getVersion3Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let gto = 0;\n        let gt = 0\n        let ito = 0;\n        let it = 0;\n        let eto = 0;\n        let et = 0;\n        let result = 'PASS';\n        let t_g = 0;\n\n        row.papers.forEach((paper) => {\n            const internal = paper.paperDetails.find((detail) => detail.title === 'Internal') || {};\n            const external = paper.paperDetails.find((detail) => detail.title === 'External') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            paper._internal = internal.marksObtained;\n            paper._internal_max = internal.maximum;\n            \n            ito += getValue(paper._internal);\n            it += getValue(paper._internal_max);\n\n            paper._external = external.marksObtained;\n            paper._external_max = external.maximum;\n            paper._grace = grace.marksObtained || 0;\n\n            t_g +=  paper._grace;\n           \n            eto += getValue(paper._external) + getValue(paper._grace);\n            et += getValue(paper._external_max);\n\n            paper._totalObtained = getValue(paper._internal) + getValue(paper._external) + getValue(paper._grace);\n            paper._total = +internal.maximum + +external.maximum;\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n        row._internal_total_o = ito;\n        row._internal_total = it;\n\n        row._external_total_o = eto;\n        row._external_total = et;\n\n        row._grand_total = gto;\n        row._total = gt; \n\n        row._total_grace = t_g;\n        \n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        row._grade = grade.code;\n        if(row._grade === 'F')\n        {\n            result = 'FAIL';\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}\n\nexport function getVersion4Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let gto = 0;\n        let gt = 0\n        let result = 'PASS';\n\n        row.papers.forEach((paper) => {\n\n            const attendance = paper.paperDetails.find((detail) => detail.title === 'Attendance') || {}\n            const unitTest = paper.paperDetails.find((detail) => detail.title === 'Unit Test') || {}\n            const assesment = paper.paperDetails.find((detail) => detail.title === 'Assessment') || {}\n            const semester = paper.paperDetails.find((detail) => detail.title === 'Semester') || {}\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n\n            paper._attendance = attendance.marksObtained;\n            paper._attendance_max = attendance.maximum;\n\n            paper._unitTest = unitTest.marksObtained;\n            paper._unitTest_max = unitTest.maximum;\n\n            paper._assesment = assesment.marksObtained;\n            paper._assesment_max = assesment.maximum;\n\n            paper._semester = semester.marksObtained;\n            paper._semester_max = semester.maximum;\n\n            paper._grace = grace.marksObtained || 0;\n\n            paper._totalObtained = getValue( paper._attendance) + getValue(paper._unitTest) + getValue(paper._assesment) + getValue(paper._semester) +  getValue(paper._grace);\n            paper._total = +attendance.maximum + +unitTest.maximum + +assesment.maximum + +semester.maximum;\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n\n        row._grand_total = gto;\n        row._total = gt; \n\n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        row._grade = grade.code;\n        if(row._grade === 'F')\n        {\n            result = 'FAIL';\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}\n\nexport function getVersion5Data(state, grades)\n{   \n    state.date = state.date ? getDate(state.date) : '';\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n    state.rows.forEach((row) => {\n        row._result = 'PASS';\n        row.papers.forEach((paper) => {\n            const written = paper.paperDetails.find((detail) => detail.title === 'Written') || {};\n            const submission = paper.paperDetails.find((detail) => detail.title === 'Submission') || {};\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n            const practical = paper.paperDetails.find((detail) => detail.title === 'Practical') || {};\n            const general = paper.paperDetails.find((detail) => detail.title === 'General') || {};\n\n\n            row._written = written.marksObtained;\n            row._written_max = written.maximum;\n            \n            row._submission = submission.marksObtained;\n            row._submission_max = submission.maximum;\n            \n            row._practical = practical.marksObtained;\n            row._practical_max = practical.maximum;\n\n            row._general = general.marksObtained;\n            row._general_max = general.maximum;\n\n            row._grace = grace.marksObtained || 0;\n            \n            \n            row._totalObtained = getValue(row._written) + getValue(row._submission) +  getValue(row._practical) +  getValue(row._general) + getValue(row._grace);\n            row._total = +written.maximum + +submission.maximum + +practical.maximum + +general.maximum;\n            \n            if(row._grace > 0)\n            {\n                row._general = `${row._general} + ${row._grace}`;\n            }\n\n            const percent = (row._totalObtained * 100) / row._total;\n            row._percent = percent.toFixed(2);\n            const grade = getGrade(Math.round(percent));\n            row._grade = grade.code;\n            if(row._grade === 'F')\n            {\n                row._result = 'FAIL';\n            }   \n        })\n\n    })\n    return state;\n}\n\nexport function getVersion6Data(state, grades)\n{\n    state.date = state.date ? getDate(state.date) : '';\n\n    const getGrade = (percent) => grades.find((grade) => grade.start <= percent && grade.end >= percent) || {};\n\n    state.rows.forEach((row) => {\n        let credit = 0;\n        let gto = 0;\n        let gt = 0\n        let ito = 0;\n        let it = 0;\n        let eto = 0;\n        let et = 0;\n\t\tlet uto = 0;\n\t\tlet ut = 0;\n        let result = 'PASS';\n\n        row.papers.forEach((paper) => {\n            const grace = paper.paperDetails.find((detail) => detail.isGrace) || {};\n\t\t\tconst unit1 = paper.paperDetails.find((detail) => detail.title === 'unit1') || {};\n\t\t\tconst unit2 = paper.paperDetails.find((detail) => detail.title === 'unit2') || {};\n            const term1 = paper.paperDetails.find((detail) => detail.title === 'term1') || {};\n\t\t\tconst term2 = paper.paperDetails.find((detail) => detail.title === 'term2') || {};\n\t\t\t\n\t\t\tpaper._unit1 = unit1.marksObtained;\n\t\t\tpaper._unit1_max = unit1.maximum;\n\t\t\tpaper._unit2 = unit2.marksObtained;\n\t\t\tpaper._unit2_max = unit2.maximum;\n\t\t\t\n\t\t\tpaper._term1 = term1.marksObtained;\n\t\t\tpaper._term1_max = term1.maximum;\n            paper._term2 = term2.marksObtained;\n\t\t\tpaper._term2_max = term2.maximum;\n\t\t\t\n            paper._grace = grace.marksObtained || 0;\n           \n            paper._obtained = getValue(paper._unit1) + getValue(paper._unit2) + getValue(paper._term1) + getValue(paper._term2) + getValue(paper._grace);\n\t\t\tpaper._max = (unit1.maximum + unit2.maximum  + term1.maximum + term2.maximum) / 2;\n\t\t\tpaper._min = paper._total * (35/100);\n\t\t\tpaper._total = (+unit1.maximum + +unit2.maximum  + +term1.maximum + +term2.maximum) / 2;\n\t\t\tpaper._totalObtained = getValue(paper._obtained) / 2;\n\t\t\t\n            const percent = (paper._totalObtained * 100) / paper._total;\n            const grade = getGrade(Math.round(percent));\n            paper._grade = grade.code;\n            if(paper._grade === 'F')\n            {\n                result = 'FAIL';\n            }   \n            gto +=  paper._totalObtained;\n            gt += paper._total ;\n        })\n        \n        row._credits = credit;\n        row._grand_total = gto;\n        row._total = gt; \n        \n        row._percent = ((row._grand_total * 100) / row._total).toFixed(2);\n        const grade =  getGrade(Math.round(row._percent));\n        row._grade = grade.code;\n        if(row._grade === 'F')\n        {\n            result = 'FAIL';\n        } \n        row._result = result;\n    })\n    \n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}